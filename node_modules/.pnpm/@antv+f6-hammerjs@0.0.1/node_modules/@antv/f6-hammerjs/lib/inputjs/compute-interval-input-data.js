"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = computeIntervalInputData;

var _inputConsts = require("./input-consts");

var _utilsConsts = require("../utils/utils-consts");

var _getVelocity = _interopRequireDefault(require("./get-velocity"));

var _getDirection = _interopRequireDefault(require("./get-direction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */
function computeIntervalInputData(session, input) {
  let last = session.lastInterval || input;
  let deltaTime = input.timeStamp - last.timeStamp;
  let velocity;
  let velocityX;
  let velocityY;
  let direction;

  if (input.eventType !== _inputConsts.INPUT_CANCEL && (deltaTime > _inputConsts.COMPUTE_INTERVAL || last.velocity === undefined)) {
    let deltaX = input.deltaX - last.deltaX;
    let deltaY = input.deltaY - last.deltaY;
    let v = (0, _getVelocity.default)(deltaTime, deltaX, deltaY);
    velocityX = v.x;
    velocityY = v.y;
    velocity = (0, _utilsConsts.abs)(v.x) > (0, _utilsConsts.abs)(v.y) ? v.x : v.y;
    direction = (0, _getDirection.default)(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    // use latest velocity info if it doesn't overtake a minimum period
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }

  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}