"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _boolOrFn = _interopRequireDefault(require("../utils/bool-or-fn"));

var _addEventListeners = require("../utils/add-event-listeners");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */
class Input {
  constructor(manager, callback) {
    let self = this;
    this.manager = manager;
    this.callback = callback; // smaller wrapper around the handler, for the scope and the enabled state of the manager,
    // so when disabled the input events are completely bypassed.

    this.eventHandler = function (ev) {
      if ((0, _boolOrFn.default)(manager.options.enable, [manager])) {
        self.handler(ev);
      }
    };

    this.init();
  }
  /**
   * @private
   * should handle the inputEvent data and trigger the callback
   * @virtual
   */


  handler() {}
  /**
   * @private
   */


  init() {
    (0, _addEventListeners.addManagerListeners)(this.manager, this.events || '', this.eventHandler);
  }
  /**
   * @private
   */


  destroy() {
    removeManagerListeners(this.manager, this.events || '', this.eventHandler);
  }

}

exports.default = Input;