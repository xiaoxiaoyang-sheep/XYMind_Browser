"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = inputHandler;

var _inputConsts = require("./input-consts");

var _computeInputData = _interopRequireDefault(require("./compute-input-data"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */
function inputHandler(manager, eventType, input) {
  let pointersLen = input.pointers.length;
  let changedPointersLen = input.changedPointers.length;
  let isFirst = eventType & _inputConsts.INPUT_START && pointersLen - changedPointersLen === 0;
  let isFinal = eventType & (_inputConsts.INPUT_END | _inputConsts.INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
  input.isFirst = !!isFirst;
  input.isFinal = !!isFinal;

  if (isFirst) {
    manager.session = {};
  } // source event is the normalized value of the domEvents
  // like 'touchstart, mouseup, pointerdown'


  input.eventType = eventType; // compute scale, rotation etc

  (0, _computeInputData.default)(manager, input); // emit secret event

  manager.emit('hammer.input', input);
  manager.recognize(input);
  manager.session.prevInput = input;
}