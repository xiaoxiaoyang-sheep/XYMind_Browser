"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _inputConsts = require("../inputjs/input-consts");

var _inputConstructor = _interopRequireDefault(require("../inputjs/input-constructor"));

var _inArray = _interopRequireDefault(require("../utils/in-array"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const POINTER_INPUT_MAP = {
  pointerdown: _inputConsts.INPUT_START,
  pointermove: _inputConsts.INPUT_MOVE,
  pointerup: _inputConsts.INPUT_END,
  pointercancel: _inputConsts.INPUT_CANCEL,
  pointerout: _inputConsts.INPUT_CANCEL
}; // in IE10 the pointer types is defined as an enum

const IE10_POINTER_TYPE_ENUM = {
  2: _inputConsts.INPUT_TYPE_TOUCH,
  3: _inputConsts.INPUT_TYPE_PEN,
  4: _inputConsts.INPUT_TYPE_MOUSE,
  5: _inputConsts.INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816

};
let POINTER_ELEMENT_EVENTS = 'pointerdown';
let POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';
/**
 * @private
 * Pointer events input
 * @constructor
 * @extends Input
 */

class PointerEventInput extends _inputConstructor.default {
  constructor() {
    PointerEventInput.prototype.events = `${POINTER_ELEMENT_EVENTS} ${POINTER_WINDOW_EVENTS}`;
    super(...arguments);
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;
    this.store = this.manager.session.pointerEvents = [];
  }
  /**
   * @private
   * handle mouse events
   * @param {Object} ev
   */


  handler(ev) {
    let {
      store
    } = this;
    let removePointer = false;
    let eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
    let eventType = POINTER_INPUT_MAP[eventTypeNormalized];
    let pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
    let isTouch = pointerType === _inputConsts.INPUT_TYPE_TOUCH; // get index of the event in the store

    let storeIndex = (0, _inArray.default)(store, ev.pointerId, 'pointerId'); // start and mouse must be down

    if (eventType & _inputConsts.INPUT_START && (ev.button === 0 || isTouch)) {
      if (storeIndex < 0) {
        store.push(ev);
        storeIndex = store.length - 1;
      }
    } else if (eventType & (_inputConsts.INPUT_END | _inputConsts.INPUT_CANCEL)) {
      removePointer = true;
    } // it not found, so the pointer hasn't been down (so it's probably a hover)


    if (storeIndex < 0) {
      return;
    } // update the event in the store


    store[storeIndex] = ev;
    this.callback(this.manager, eventType, {
      pointers: store,
      changedPointers: [ev],
      pointerType,
      srcEvent: ev
    });

    if (removePointer) {
      // remove from the store
      store.splice(storeIndex, 1);
    }
  }

}

exports.default = PointerEventInput;