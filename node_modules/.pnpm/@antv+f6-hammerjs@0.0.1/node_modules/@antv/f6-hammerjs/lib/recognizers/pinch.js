"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _attribute = _interopRequireDefault(require("./attribute"));

var _touchactionConsts = require("../touchactionjs/touchaction-Consts");

var _recognizerConsts = require("../recognizerjs/recognizer-consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */
class PinchRecognizer extends _attribute.default {
  constructor() {
    super(...arguments);
  }

  getTouchAction() {
    return [_touchactionConsts.TOUCH_ACTION_NONE];
  }

  attrTest(input) {
    return super.attrTest(input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & _recognizerConsts.STATE_BEGAN);
  }

  emit(input) {
    if (input.scale !== 1) {
      let inOut = input.scale < 1 ? 'in' : 'out';
      input.additionalEvent = this.options.event + inOut;
    }

    super.emit(input);
  }

}

exports.default = PinchRecognizer;
PinchRecognizer.prototype.defaults = {
  event: 'pinch',
  threshold: 0,
  pointers: 2
};