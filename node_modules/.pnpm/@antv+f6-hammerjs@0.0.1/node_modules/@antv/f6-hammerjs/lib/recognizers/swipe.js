"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _attribute = _interopRequireDefault(require("../recognizers/attribute"));

var _utilsConsts = require("../utils/utils-consts");

var _inputConsts = require("../inputjs/input-consts");

var _pan = _interopRequireDefault(require("./pan"));

var _directionStr = _interopRequireDefault(require("../recognizerjs/direction-str"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */
class SwipeRecognizer extends _attribute.default {
  constructor() {
    super(...arguments);
  }

  getTouchAction() {
    return _pan.default.prototype.getTouchAction.call(this);
  }

  attrTest(input) {
    let {
      direction
    } = this.options;
    let velocity;

    if (direction & (_inputConsts.DIRECTION_HORIZONTAL | _inputConsts.DIRECTION_VERTICAL)) {
      velocity = input.overallVelocity;
    } else if (direction & _inputConsts.DIRECTION_HORIZONTAL) {
      velocity = input.overallVelocityX;
    } else if (direction & _inputConsts.DIRECTION_VERTICAL) {
      velocity = input.overallVelocityY;
    }

    return super.attrTest(input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers === this.options.pointers && (0, _utilsConsts.abs)(velocity) > this.options.velocity && input.eventType & _inputConsts.INPUT_END;
  }

  emit(input) {
    let direction = (0, _directionStr.default)(input.offsetDirection);

    if (direction) {
      this.manager.emit(this.options.event + direction, input);
    }

    this.manager.emit(this.options.event, input);
  }

}

exports.default = SwipeRecognizer;
SwipeRecognizer.prototype.defaults = {
  event: 'swipe',
  threshold: 10,
  velocity: 0.3,
  direction: _inputConsts.DIRECTION_HORIZONTAL | _inputConsts.DIRECTION_VERTICAL,
  pointers: 1
};