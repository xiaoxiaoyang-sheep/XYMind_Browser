"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _recognizerConstructor = _interopRequireDefault(require("../recognizerjs/recognizer-constructor"));

var _recognizerConsts = require("../recognizerjs/recognizer-consts");

var _utilsConsts = require("../utils/utils-consts");

var _setTimeoutContext = _interopRequireDefault(require("../utils/set-timeout-context"));

var _touchactionConsts = require("../touchactionjs/touchaction-Consts");

var _inputConsts = require("../inputjs/input-consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */
class PressRecognizer extends _recognizerConstructor.default {
  constructor() {
    super(...arguments);
    this._timer = null;
    this._input = null;
  }

  getTouchAction() {
    return [_touchactionConsts.TOUCH_ACTION_AUTO];
  }

  process(input) {
    let {
      options
    } = this;
    let validPointers = input.pointers.length === options.pointers;
    let validMovement = input.distance < options.threshold;
    let validTime = input.deltaTime > options.time;
    this._input = input; // we only allow little movement
    // and we've reached an end event, so a tap is possible

    if (!validMovement || !validPointers || input.eventType & (_inputConsts.INPUT_END | _inputConsts.INPUT_CANCEL) && !validTime) {
      this.reset();
    } else if (input.eventType & _inputConsts.INPUT_START) {
      this.reset();
      this._timer = (0, _setTimeoutContext.default)(() => {
        this.state = _recognizerConsts.STATE_RECOGNIZED;
        this.tryEmit();
      }, options.time, this);
    } else if (input.eventType & _inputConsts.INPUT_END) {
      return _recognizerConsts.STATE_RECOGNIZED;
    }

    return _recognizerConsts.STATE_FAILED;
  }

  reset() {
    clearTimeout(this._timer);
    this._timer = null;
  }

  emit(input) {
    if (this.state !== _recognizerConsts.STATE_RECOGNIZED) {
      return;
    }

    if (input && input.eventType & _inputConsts.INPUT_END) {
      this.manager.emit(`${this.options.event}up`, input);
    } else {
      this._input.timeStamp = (0, _utilsConsts.now)();
      this.manager.emit(this.options.event, this._input);
    }
  }

}

exports.default = PressRecognizer;
PressRecognizer.prototype.defaults = {
  event: 'press',
  pointers: 1,
  time: 251,
  // minimal time of the pointer to be pressed
  threshold: 9 // a minimal movement is ok, but keep it low

};