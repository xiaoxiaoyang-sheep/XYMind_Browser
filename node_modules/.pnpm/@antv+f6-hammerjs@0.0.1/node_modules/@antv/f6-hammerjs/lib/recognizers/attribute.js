"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _recognizerConstructor = _interopRequireDefault(require("../recognizerjs/recognizer-constructor"));

var _recognizerConsts = require("../recognizerjs/recognizer-consts");

var _inputConsts = require("../inputjs/input-consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */
class AttrRecognizer extends _recognizerConstructor.default {
  constructor() {
    super(...arguments);
  }
  /**
   * @private
   * Used to check if it the recognizer receives valid input, like input.distance > 10.
   * @memberof AttrRecognizer
   * @param {Object} input
   * @returns {Boolean} recognized
   */


  attrTest(input) {
    let optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  }
  /**
   * @private
   * Process the input and return the state for the recognizer
   * @memberof AttrRecognizer
   * @param {Object} input
   * @returns {*} State
   */


  process(input) {
    let {
      state
    } = this;
    let {
      eventType
    } = input;
    let isRecognized = state & (_recognizerConsts.STATE_BEGAN | _recognizerConsts.STATE_CHANGED);
    let isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED

    if (isRecognized && (eventType & _inputConsts.INPUT_CANCEL || !isValid)) {
      return state | _recognizerConsts.STATE_CANCELLED;
    } else if (isRecognized || isValid) {
      if (eventType & _inputConsts.INPUT_END) {
        return state | _recognizerConsts.STATE_ENDED;
      } else if (!(state & _recognizerConsts.STATE_BEGAN)) {
        return _recognizerConsts.STATE_BEGAN;
      }

      return state | _recognizerConsts.STATE_CHANGED;
    }

    return _recognizerConsts.STATE_FAILED;
  }

}

exports.default = AttrRecognizer;
AttrRecognizer.prototype.defaults = {
  /**
   * @private
   * @type {Number}
   * @default 1
   */
  pointers: 1
};