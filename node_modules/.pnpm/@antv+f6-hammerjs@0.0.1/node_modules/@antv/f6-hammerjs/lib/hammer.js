"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ifUndefined = _interopRequireDefault(require("./utils/if-undefined"));

var _touchactionConsts = require("./touchactionjs/touchaction-Consts");

var _inputConsts = require("./inputjs/input-consts");

var _rotate = _interopRequireDefault(require("./recognizers/rotate"));

var _pinch = _interopRequireDefault(require("./recognizers/pinch"));

var _swipe = _interopRequireDefault(require("./recognizers/swipe"));

var _pan = _interopRequireDefault(require("./recognizers/pan"));

var _tap = _interopRequireDefault(require("./recognizers/tap"));

var _press = _interopRequireDefault(require("./recognizers/press"));

var _manager = _interopRequireDefault(require("./manager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * Simple way to create a manager with a default set of recognizers.
 * @param {Object} [options]
 * @constructor
 */
class Hammer {
  constructor(options) {
    options = options || {};
    options.recognizers = (0, _ifUndefined.default)(options.recognizers, Hammer.defaults.preset);
    return new _manager.default(options);
  }

}
/**
 * @private
 * default settings
 * @namespace
 */


exports.default = Hammer;
Hammer.defaults = {
  /**
   * @private
   * set if DOM events are being triggered.
   * But this is slower and unused by simple implementations, so disabled by default.
   * @type {Boolean}
   * @default false
   */
  domEvents: false,

  /**
   * @private
   * The value for the touchAction property/fallback.
   * When set to `compute` it will magically set the correct value based on the added recognizers.
   * @type {String}
   * @default compute
   */
  touchAction: _touchactionConsts.TOUCH_ACTION_COMPUTE,

  /**
   * @private
   * @type {Boolean}
   * @default true
   */
  enable: true,

  /**
   * @private
   * force an input class
   * @type {Null|Function}
   * @default null
   */
  inputClass: null,

  /**
   * @private
   * Default recognizer setup when calling `Hammer()`
   * When creating a new Manager these will be skipped.
   * @type {Array}
   */
  preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
  [_rotate.default, {
    enable: false
  }], [_pinch.default, {
    enable: false
  }, ['rotate']], [_swipe.default, {
    direction: _inputConsts.DIRECTION_HORIZONTAL
  }], [_pan.default, {
    direction: _inputConsts.DIRECTION_HORIZONTAL
  }, ['swipe']], [_tap.default], [_tap.default, {
    event: 'doubletap',
    taps: 2
  }, ['tap']], [_press.default]]
};