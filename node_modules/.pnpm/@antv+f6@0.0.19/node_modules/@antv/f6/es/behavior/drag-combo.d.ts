import { G6Event, IG6GraphEvent, Item, ICombo } from '@antv/f6-core';
declare const _default: {
    getDefaultCfg(): {
        enableDelegate: boolean;
        delegateStyle: {};
        onlyChangeComboSize: boolean;
        activeState: string;
        selectedState: string;
    };
    getEvents(): {
        click?: string;
        dblclick?: string;
        tap?: string;
        dbltap?: string;
        dragstart?: string;
        dragend?: string;
        drag?: string;
        dragenter?: string;
        dragleave?: string;
        dragover?: string;
        dragout?: string;
        drop?: string;
        pinchstart?: string;
        pinchmove?: string;
        panstart?: string;
        panmove?: string;
        panend?: string;
        press?: string;
        actionend?: string;
        touchstart?: string;
        touchmove?: string;
        touchend?: string;
        "canvas:touchstart"?: string;
        "canvas:touchmove"?: string;
        "canvas:touchend"?: string;
        "node:touchstart"?: string;
        "node:touchmove"?: string;
        "node:touchend"?: string;
        "combo:touchstart"?: string;
        "combo:touchmove"?: string;
        "combo:touchend"?: string;
        "edge:touchstart"?: string;
        "edge:touchmove"?: string;
        "edge:touchend"?: string;
        "node:click"?: string;
        "node:dblclick"?: string;
        "node:drop"?: string;
        "node:dragover"?: string;
        "node:dragenter"?: string;
        "node:dragleave"?: string;
        "node:dragstart"?: string;
        "node:drag"?: string;
        "node:dragend"?: string;
        "node:tap"?: string;
        "node:dbltap"?: string;
        "node:panstart"?: string;
        "node:panmove"?: string;
        "node:panend"?: string;
        "node:press"?: string;
        "combo:click"?: string;
        "combo:dblclick"?: string;
        "combo:drop"?: string;
        "combo:dragover"?: string;
        "combo:dragenter"?: string;
        "combo:dragleave"?: string;
        "combo:dragstart"?: string;
        "combo:drag"?: string;
        "combo:dragend"?: string;
        "combo:tap"?: string;
        "combo:dbltap"?: string;
        "combo:panstart"?: string;
        "combo:panmove"?: string;
        "combo:panend"?: string;
        "combo:press"?: string;
        "edge:click"?: string;
        "edge:dblclick"?: string;
        "edge:drop"?: string;
        "edge:dragover"?: string;
        "edge:dragenter"?: string;
        "edge:dragleave"?: string;
        "edge:tap"?: string;
        "edge:dbltap"?: string;
        "edge:press"?: string;
        "canvas:click"?: string;
        "canvas:dblclick"?: string;
        "canvas:drop"?: string;
        "canvas:dragenter"?: string;
        "canvas:dragleave"?: string;
        "canvas:dragstart"?: string;
        "canvas:drag"?: string;
        "canvas:dragend"?: string;
        "canvas:tap"?: string;
        "canvas:dbltap"?: string;
        "canvas:panstart"?: string;
        "canvas:panmove"?: string;
        "canvas:panend"?: string;
        "canvas:press"?: string;
        beforerender?: string;
        afterrender?: string;
        beforeadditem?: string;
        afteradditem?: string;
        beforeremoveitem?: string;
        afterremoveitem?: string;
        beforeupdateitem?: string;
        afterupdateitem?: string;
        beforeitemvisibilitychange?: string;
        afteritemvisibilitychange?: string;
        beforeitemstatechange?: string;
        afteritemstatechange?: string;
        beforeitemrefresh?: string;
        afteritemrefresh?: string;
        beforeitemstatesclear?: string;
        afteritemstatesclear?: string;
        beforemodechange?: string;
        aftermodechange?: string;
        beforelayout?: string;
        afterlayout?: string;
        beforecreateedge?: string;
        aftercreateedge?: string;
        beforegraphrefreshposition?: string;
        aftergraphrefreshposition?: string;
        beforegraphrefresh?: string;
        aftergraphrefresh?: string;
        beforeanimate?: string;
        afteranimate?: string;
        beforepaint?: string;
        afterpaint?: string;
        beforecollapseexpandcombo?: string;
        aftercollapseexpandcombo?: string;
        graphstatechange?: string;
        afteractivaterelations?: string;
        nodeselectchange?: string;
        tooltipchange?: string;
        wheelzoom?: string;
        viewportchange?: string;
        dragnodeend?: string;
        stackchange?: string;
    };
    validationCombo(evt: IG6GraphEvent): boolean;
    onDragStart(evt: IG6GraphEvent): void;
    onDrag(evt: IG6GraphEvent): void;
    updatePositions(evt: IG6GraphEvent): void;
    onDrop(evt: IG6GraphEvent): void;
    onNodeDrop(evt: IG6GraphEvent): void;
    onDragEnter(evt: IG6GraphEvent): void;
    onDragLeave(evt: any): void;
    onDragEnd(evt: IG6GraphEvent): void;
    end(comboDropedOn: ICombo | undefined, evt: IG6GraphEvent): void;
    /**
     * 遍历 comboTree，分别更新 node 和 combo
     * @param data
     * @param fn
     */
    traverse<T extends Item>(data: T, fn: (param: T) => boolean): void;
    updateCombo(item: ICombo, evt: IG6GraphEvent): void;
    /**
     *
     * @param item 当前正在拖动的元素
     * @param evt
     */
    updateSignleItem(item: Item, evt: IG6GraphEvent): void;
    /**
     * 根据 ID 获取父 Combo
     * @param parentId 父 Combo ID
     */
    getParentCombo(parentId: string): ICombo | undefined;
    updateDelegate(evt: IG6GraphEvent): void;
};
export default _default;
